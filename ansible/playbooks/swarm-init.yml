---
# Docker Swarm initialization playbook
- name: Initialize Docker Swarm cluster
  hosts: swarm_managers
  become: yes
  gather_facts: yes
  
  tasks:
    - name: Check if Swarm is already initialized
      command: docker info --format '{{ "{{" }}.Swarm.LocalNodeState{{ "}}" }}'
      register: swarm_status
      changed_when: false
      
    - name: Initialize Docker Swarm
      command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: swarm_status.stdout != "active"
      register: swarm_init_result
      
    - name: Get manager join token
      command: docker swarm join-token manager -q
      register: manager_token
      when: swarm_status.stdout == "active" or swarm_init_result is succeeded
      
    - name: Get worker join token
      command: docker swarm join-token worker -q
      register: worker_token
      when: swarm_status.stdout == "active" or swarm_init_result is succeeded
      
    - name: Display Swarm initialization result
      debug:
        msg: "Swarm initialized on {{ inventory_hostname }}"
      when: swarm_init_result is succeeded
      
    - name: Set join tokens as facts
      set_fact:
        swarm_manager_token: "{{ manager_token.stdout }}"
        swarm_worker_token: "{{ worker_token.stdout }}"
        swarm_manager_ip: "{{ ansible_default_ipv4.address }}"
      when: manager_token is defined and worker_token is defined

- name: Join worker nodes to Swarm
  hosts: swarm_workers
  become: yes
  gather_facts: yes
  
  tasks:
    - name: Check if node is already in Swarm
      command: docker info --format '{{ "{{" }}.Swarm.LocalNodeState{{ "}}" }}'
      register: worker_swarm_status
      changed_when: false
      
    - name: Join Swarm as worker
      command: >
        docker swarm join
        --token {{ hostvars[groups['swarm_managers'][0]]['swarm_worker_token'] }}
        {{ hostvars[groups['swarm_managers'][0]]['swarm_manager_ip'] }}:2377
      when: 
        - worker_swarm_status.stdout != "active"
        - hostvars[groups['swarm_managers'][0]]['swarm_worker_token'] is defined
      register: worker_join_result
      
    - name: Display worker join result
      debug:
        msg: "{{ inventory_hostname }} joined Swarm as worker"
      when: worker_join_result is succeeded

- name: Verify Swarm cluster
  hosts: swarm_managers
  become: yes
  
  tasks:
    - name: List Swarm nodes
      command: docker node ls
      register: swarm_nodes
      
    - name: Display Swarm cluster status
      debug:
        msg: "{{ swarm_nodes.stdout_lines }}"
        
    - name: Create overlay network for application
      command: docker network create --driver overlay --attachable app-network
      register: network_result
      failed_when: 
        - network_result.rc != 0
        - "'already exists' not in network_result.stderr"
      changed_when: network_result.rc == 0
      
    - name: Display network creation result
      debug:
        msg: "Overlay network 'app-network' created"
      when: network_result.changed